import click
import enum
import random


class PizzaSize(enum.Enum):
    l = 3
    xl = 5


class Pizza:
    """–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –ø–∏—Ü—Ü—ã"""
    receipt = ['tomato sauce', 'mozzarella']
    picture = ''

    def __init__(self, size: PizzaSize = PizzaSize.xl):
        self.size = size

    @classmethod
    def dict(cls):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ—Ü–µ–ø—Ç –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è"""
        return {cls.__name__: cls.receipt}

    def __eq__(self, other):
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø–∏—Ü—Ü—ã"""
        if type(self) != type(other):
            return False
        return self.size == other.size


class Margherita(Pizza):
    """–ü–∏—Ü—Ü–∞ Margherita"""
    receipt = ['tomato sauce', 'mozzarella', 'tomatoes']
    picture = 'üßÄ'


class Pepperoni(Pizza):
    """–ü–∏—Ü—Ü–∞ Pepperoni"""
    receipt = ['tomato sauce', 'mozzarella', 'pepperoni']
    picture = 'üçï'


class Hawaiian(Pizza):
    """–ü–∏—Ü—Ü–∞ Hawaiian"""
    receipt = ['tomato sauce', 'mozzarella', 'chicken', 'pineapples']
    picture = 'üçç'


@click.group()
def cli():
    pass


@cli.command()
@click.option('--delivery', default=False, is_flag=True)
@click.argument('pizza', nargs=1)
@click.argument('size', default='xl', nargs=1)
def order(pizza: str, size: str, delivery: bool):
    """–ì–æ—Ç–æ–≤–∏—Ç –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""

    childs_dict = dict(zip(list(map(lambda x: x.__name__.lower(), Pizza.__subclasses__())),
                           Pizza.__subclasses__()))
    try:
        child_class = childs_dict[pizza.lower()]
    except KeyError:
        print('No such pizza!')
        return

    if size == 'l':
        pizza_instance = child_class(PizzaSize.l)
    else:
        pizza_instance = child_class()

    bake(pizza_instance)
    if delivery:
        deliver(pizza_instance)
    else:
        pickup(pizza_instance)


@cli.command()
def menu():
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é"""
    for child in Pizza.__subclasses__():
        receipt = child.dict()
        for r in receipt:
            print(f' - {r} {child.picture}: {",".join(receipt[r])}')


def log(message: str = ''):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º.
    –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–µ –∑–∞–¥–∞–Ω, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è –∏–º—è —Ñ—É–Ω–∫—Ü–∏–∏ –∏ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è (randint).
    –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –∑–∞–¥–∞–Ω, —Ç–æ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É."""
    def decorator(func):
        def wrapper(*args, **kwargs):
            if message == '':
                func_time = args[0].size.value * random.randint(1, 10)
                print(f'{func.__name__} - {func_time} c!')
            else:
                func_time = random.randint(1, 10)
                print(message.replace('{}', f'{func_time}'))
        return wrapper
    return decorator


@log()
def bake(pizza: Pizza):
    """–ì–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É"""
    pass


@log('üõµ –î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {}—Å!')
def deliver(pizza: Pizza):
    """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
    pass


@log('üè† –ó–∞–±—Ä–∞–ª–∏ –∑–∞ {}—Å!')
def pickup(pizza: Pizza):
    """–°–∞–º–æ–≤—ã–≤–æ–∑"""
    pass


if __name__ == '__main__':
    cli()
